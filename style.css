// ===== Core site behaviors (same as before, trimmed to essentials) =====
(function(){
  // Min date = today
  const dateInput=document.getElementById('date');
  if(dateInput){
    const t=new Date(),y=t.getFullYear(),m=String(t.getMonth()+1).padStart(2,'0'),d=String(t.getDate()).padStart(2,'0');
    dateInput.min=`${y}-${m}-${d}`;
  }

  // Sync _replyto with visitor email
  const email=document.getElementById('email');
  const reply=document.getElementById('replyToField');
  function sync(){ if(reply && email) reply.value = email.value.trim(); }
  email?.addEventListener('input', sync);
  email?.addEventListener('change', sync);
  sync();
})();

// ===== Effects Engine =====
(function(){
  // Canvases
  function ensureCanvas(id){
    let el=document.getElementById(id);
    if(!el){ el=document.createElement('canvas'); el.id=id; document.body.prepend(el); }
    el.style.position='fixed'; el.style.inset='0'; el.style.width='100%'; el.style.height='100%';
    el.style.pointerEvents='none'; el.style.zIndex='0'; el.style.background='transparent';
    return el;
  }
  const fogCanvas = ensureCanvas('bgFog');
  const pCanvas   = ensureCanvas('bgParticles');
  const sCanvas   = ensureCanvas('bgSparks');
  const fogCtx = fogCanvas.getContext('2d');
  const pCtx   = pCanvas.getContext('2d');
  const sCtx   = sCanvas.getContext('2d');

  let W=innerWidth, H=innerHeight, DPR=Math.min(devicePixelRatio||1,2);
  const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
  const isMobile = /iphone|ipad|android|mobile/i.test(navigator.userAgent);
  const FX = { enabled:true, color:'gold' };

  // Control UI
  const fxToggle=document.getElementById('fxToggle');
  const fxColor =document.getElementById('fxColor');
  fxToggle?.addEventListener('click', ()=>{ FX.enabled=!FX.enabled; fxToggle.setAttribute('aria-pressed', String(FX.enabled)); });
  fxColor?.addEventListener('change', e=>{ FX.color = e.target.value; });

  function colorSet(){
    switch(FX.color){
      case 'blue': return { aura:'rgba(120,180,255,0.25)', core:'rgba(120,180,255,0.95)', spark:'rgba(120,180,255,0.95)'};
      case 'red':  return { aura:'rgba(255,120,120,0.25)', core:'rgba(255,120,120,0.95)', spark:'rgba(255,140,120,0.95)'};
      default:     return { aura:'rgba(218,189,102,0.25)', core:'rgba(218,189,102,0.90)', spark:'rgba(255,230,140,0.95)'};
    }
  }

  function resize(){
    W=innerWidth; H=innerHeight; DPR=Math.min(devicePixelRatio||1,2);
    fogCanvas.width  = Math.round(W*0.6);
    fogCanvas.height = Math.round(H*0.6);
    fogCanvas.style.width='100%'; fogCanvas.style.height='100%';
    pCanvas.width = Math.round(W*DPR);
    pCanvas.height= Math.round(H*DPR);
    pCanvas.style.width='100%'; pCanvas.style.height='100%';
    pCtx.setTransform(DPR,0,0,DPR,0,0);
    sCanvas.width = Math.round(W*DPR);
    sCanvas.height= Math.round(H*DPR);
    sCanvas.style.width='100%'; sCanvas.style.height='100%';
    sCtx.setTransform(DPR,0,0,DPR,0,0);
    updateHeroRect();
  }
  addEventListener('resize', resize, {passive:true});
  resize();

  // Hero rect (for fog bias & sparks)
  let heroRect={x:W/2, y:H*0.25, w:200, h:200};
  function updateHeroRect(){
    const el=document.querySelector('.hero-logo.big');
    if(!el) return;
    const r=el.getBoundingClientRect();
    heroRect={ x:r.left + r.width/2, y:r.top + r.height/2, w:r.width, h:r.height };
  }
  addEventListener('scroll', updateHeroRect, {passive:true});
  const obs = new ResizeObserver(updateHeroRect);
  document.querySelectorAll('.hero-logo.big').forEach(el=>obs.observe(el));

  // Base particles
  const BASE_PARTICLES = prefersReduced ? 0 : (isMobile ? 90 : 160);
  const particles = Array.from({length: BASE_PARTICLES}, () => ({
    x: Math.random()*W,
    y: Math.random()*H,
    vx:(Math.random()-0.5)*0.6,
    vy:(Math.random()-0.5)*0.6,
    r: Math.random()*2+1.2,
    a: Math.random()*Math.PI*2,
    spin:(Math.random()-0.5)*0.02
  }));

  // Pointer repel
  const attractor={x:-9999,y:-9999,active:false};
  let lastPointerTime=0;
  const setAttractor=(x,y)=>{ attractor.x=x; attractor.y=y; attractor.active=true; lastPointerTime=performance.now(); };
  const idleOff=()=>{ if(performance.now()-lastPointerTime>1400){ attractor.active=false; attractor.x=-9999; attractor.y=-9999; } };
  addEventListener('pointermove', e=>setAttractor(e.clientX,e.clientY), {passive:true});
  addEventListener('pointerdown', e=>setAttractor(e.clientX,e.clientY), {passive:true});
  addEventListener('touchstart', e=>{ const t=e.touches[0]; if(t) setAttractor(t.clientX,t.clientY); }, {passive:true});
  addEventListener('touchmove',  e=>{ const t=e.touches[0]; if(t) setAttractor(t.clientX,t.clientY); }, {passive:true});

  function drawParticles(){
    pCtx.clearRect(0,0,W,H);
    if(!FX.enabled) return;
    const R = isMobile ? 110 : 160;
    const R2= R*R;
    const colors=colorSet();
    for(const p of particles){
      p.x+=p.vx; p.y+=p.vy; p.a+=p.spin;
      if(p.x<-10) p.x=W+10; if(p.x>W+10) p.x=-10;
      if(p.y<-10) p.y=H+10; if(p.y>H+10) p.y=-10;
      if(attractor.active){
        const dx=p.x-attractor.x, dy=p.y-attractor.y, d2=dx*dx+dy*dy;
        if(d2<R2){
          const d=Math.sqrt(d2)||0.001, force=Math.min(1.6,(R2/d2));
          const ux=dx/d, uy=dy/d;
          p.vx += ux*0.08*force;
          p.vy += uy*0.08*force;
          p.vx*=0.98; p.vy*=0.98;
        }
      }
      pCtx.save();
      pCtx.translate(p.x,p.y);
      pCtx.rotate(p.a);
      pCtx.globalAlpha=0.35;
      pCtx.beginPath(); pCtx.arc(0,0,p.r*2.2,0,Math.PI*2);
      pCtx.fillStyle=colors.aura; pCtx.fill();
      pCtx.globalAlpha=0.9;
      pCtx.beginPath(); pCtx.arc(0,0,p.r,0,Math.PI*2);
      pCtx.fillStyle=colors.core; pCtx.fill();
      pCtx.restore();
      const sp2=p.vx*p.vx+p.vy*p.vy; if(sp2>2.5){ p.vx*=0.96; p.vy*=0.96; }
    }
    idleOff();
  }

  // Fog with hero bias (heavier under logo)
  const FOG_COUNT = prefersReduced ? 0 : (isMobile ? 18 : 30);
  const fogs = Array.from({length: FOG_COUNT}, (_,i) => {
    // Half of fogs biased near hero bottom
    const biased = i < FOG_COUNT*0.55;
    const fx = biased ? (heroRect.x + (Math.random()-0.5)*heroRect.w*1.4) : Math.random()*fogCanvas.width;
    const fy = biased ? (heroRect.y + heroRect.h*0.6 + Math.random()*heroRect.h*0.8) : Math.random()*fogCanvas.height;
    const baseR=(isMobile?90:120)+Math.random()*160;
    return {
      x: fx, y: fy, r: baseR,
      alpha: biased ? (0.08+Math.random()*0.1) : (0.05+Math.random()*0.07),
      dx:(Math.random()*0.4+0.05)*(Math.random()<.5?-1:1),
      dy:(Math.random()*0.25+0.03)*(Math.random()<.5?-1:1)
    };
  });
  const fogRGBA=a=>`rgba(180,190,200,${a})`;
  function drawFog(){
    const ctx=fogCtx, w=fogCanvas.width, h=fogCanvas.height;
    ctx.clearRect(0,0,w,h);
    if(!FX.enabled) return;
    ctx.globalCompositeOperation='lighter';
    for(const f of fogs){
      f.x+=f.dx*0.2; f.y+=f.dy*0.2;
      if(f.x<-f.r){ f.x=w+f.r*0.5; f.y=heroRect.y + heroRect.h*0.6 + Math.random()*heroRect.h; }
      if(f.x>w+f.r){ f.x=-f.r*0.5;  f.y=heroRect.y + heroRect.h*0.6 + Math.random()*heroRect.h; }
      if(f.y<-f.r){ f.y=h+f.r*0.5;  f.x=heroRect.x + (Math.random()-0.5)*heroRect.w; }
      if(f.y>h+f.r){ f.y=-f.r*0.5;  f.x=heroRect.x + (Math.random()-0.5)*heroRect.w; }

      const grad=ctx.createRadialGradient(f.x,f.y,f.r*0.1,f.x,f.y,f.r);
      grad.addColorStop(0, fogRGBA(f.alpha));
      grad.addColorStop(1, fogRGBA(0));

      ctx.save();
      ctx.filter='blur(3px)';
      ctx.fillStyle=grad;
      ctx.beginPath(); ctx.arc(f.x,f.y,f.r,0,Math.PI*2); ctx.fill();
      ctx.restore();
    }
    ctx.globalCompositeOperation='source-over';
  }

  // Sparks around hero logo
  const SPARKS = prefersReduced ? [] : Array.from({length: isMobile? 40: 70}, () => ({x:0,y:0,vx:0,vy:0,a:0,life:0,max:0}));
  function spawnSpark(){
    const colors=colorSet();
    const angle=Math.random()*Math.PI*2;
    const radius=Math.max(heroRect.w, heroRect.h)*0.6;
    const cx=heroRect.x, cy=heroRect.y;
    const sx = cx + Math.cos(angle)*radius;
    const sy = cy + Math.sin(angle)*radius;
    const speed = 0.8 + Math.random()*1.4;
    return { x:sx, y:sy, vx:Math.cos(angle)*speed, vy:Math.sin(angle)*speed, a:Math.random()*Math.PI*2, life:0, max: 40+Math.random()*40, color: colors.spark, size: 1+Math.random()*2 };
  }
  function drawSparks(){
    sCtx.clearRect(0,0,W,H);
    if(!FX.enabled) return;
    // spawn a few each frame
    for(let i=0;i<2;i++){
      const idx = SPARKS.findIndex(s=>s.life<=0);
      if(idx>=0) SPARKS[idx]=spawnSpark();
      else if(SPARKS.length<120) SPARKS.push(spawnSpark());
    }
    for(const s of SPARKS){
      if(s.life<=0) continue;
      s.x += s.vx; s.y += s.vy;
      s.vx *= 0.985; s.vy *= 0.985;
      s.life++;
      sCtx.save();
      sCtx.globalAlpha = Math.max(0, 1 - s.life/s.max);
      sCtx.beginPath();
      sCtx.arc(s.x, s.y, s.size, 0, Math.PI*2);
      sCtx.fillStyle = s.color;
      sCtx.fill();
      sCtx.restore();
      if(s.life>s.max){ s.life=0; }
    }
  }

  // Loop
  let last=0, step=prefersReduced? 1000/24 : 16;
  function loop(ts){
    if(ts-last>step){
      updateHeroRect();
      drawFog();
      drawParticles();
      drawSparks();
      last=ts;
    }
    requestAnimationFrame(loop);
  }
  requestAnimationFrame(loop);
})();
